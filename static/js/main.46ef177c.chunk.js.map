{"version":3,"sources":["Header.tsx","Footer.tsx","Quote.ts","QuoteMachine.ts","QuoteContainer.tsx","App.tsx","serviceWorker.js","index.js"],"names":["Header","id","className","Footer","href","DefaultQuotes","Text","Author","Context","QuoteMachine","pool","quotes","this","Math","floor","random","length","QuoteContainer","props","quoteMachine","state","quote","generate","generateQuote","bind","setState","console","log","newQuoteArgs","generator","React","Component","QuoteBox","footerContent","NewQuote","onClick","TweetQuote","text","encodeURIComponent","App","Boolean","window","location","hostname","match","require","get","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.46ef177c.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Header(): JSX.Element {\n  return (\n    <div id=\"header\" className=\"jumbotron text-white bg-primary\">\n      <h1 className=\"display-4\">Random Quote Machine</h1>\n      <p className=\"lead\">Generate random quotes out of thin air!</p>\n    </div>\n  )\n}\n\nexport default Header;","import React from 'react';\n\nfunction Footer(): JSX.Element {\n  return (\n    <footer id=\"footer\" className=\"footer navbar bg-secondary text-white\">\n      <p>\n        Copyright © 2020 Jan Reggie Dela Cruz.\n        Project for the Front End Libraries Certification in <a href=\"https://www.freecodecamp.org/learn/\">freeCodeCamp</a>.\n      </p>\n      <p>\n        You may view the source code of this project over at <a href=\"https://github.com/janreggie/randomquoter\">github.com/janreggie/randomquoter</a>.\n      </p>\n      <p>\n        All quotes from this project have been sourced from <a href=\"https://en.wikiquote.org/wiki/Main_Page\">Wikiquote</a>.\n        Content is available under <a href=\"https://creativecommons.org/licenses/by-sa/3.0/\">CC BY-SA 3.0</a>\n      </p>\n    </footer>\n  )\n}\n\nexport default Footer;","// Quote is an interface that has an Author and a Text, but may have an optional Context.\n// The Text is the text of the quote.\n// The Author is the person who said the Quote.\n// The Context contains details where the Quote may be from;\n// for example, as an excerpt from a book.\nexport interface Quote {\n  readonly Text: string;\n  readonly Author: string;\n  readonly Context?: string;\n}\n\n// DefaultQuotes is a default array of Quotes\nexport const DefaultQuotes: Array<Quote> = [\n  {\n    Text: `Mona Lisa, Mona Lisa, men have named you\nYou're so like the lady with the mystic smile\nIs it only 'cause you're lonely they have blamed you?\nFor that Mona Lisa strangeness in your smile?`,\n    Author: `Nat King Cole`,\n    Context: `from his song Mona Lisa`\n  },\n  {\n    Text: `A learning experience is one of those things that say, \"You know that thing you just did? Don't do that.\"`,\n    Author: `Douglas Adams`,\n    Context: `Interview in The Daily Nexus (5 April 2000), reprinted in The Salmon of Doubt`\n  },\n  {\n    Text: `The world is a thing of utter inordinate complexity and richness and strangeness that is absolutely awesome. I mean the idea that such complexity can arise not only out of such simplicity, but probably absolutely out of nothing, is the most fabulous extraordinary idea. And once you get some kind of inkling of how that might have happened, it's just wonderful. And … the opportunity to spend 70 or 80 years of your life in such a universe is time well spent as far as I am concerned.`,\n    Author: `Douglas Adams`,\n    Context: `Response to the question \"What is it about science that really gets your blood running?\" — as quoted in Richard Dawkins in his eulogy for Adams`\n  },\n  {\n    Text: `Piety requires us to honor truth above our friends.`,\n    Author: `Aristotle`,\n    Context: `Book I, 1096a.16`\n  },\n  {\n    Text: `Develop the mind of equilibrium. You will always be getting praise and blame, but do not let either affect the poise of the mind: follow the calmness, the absence of pride.`,\n    Author: `Gautama Buddha`,\n    Context: `Sutta Nipāta`\n  },\n  {\n    Text: `To study and not think is a waste. To think and not study is dangerous.`,\n    Author: `Confucius`,\n    Context: `The Analects, Chapter II`\n  },\n  {\n    Text: `When I walk along with two others, they may serve me as my teachers. I will select their good qualities and follow them, their bad qualities and avoid them.`,\n    Author: `Confucius`,\n    Context: `The Analects, Chapter VII`\n  },\n  {\n    Text: `The superior man examines his heart, that there may be nothing wrong there, and that he may have no cause for dissatisfaction with himself. That wherein the superior man cannot be equaled is simply this — his work which other men cannot see.`,\n    Author: `Confucius`,\n    Context: `The Doctrine of the Mean`\n  },\n  {\n    Text: `Things have their root and their branches. Affairs have their end and their beginning. To know what is first and what is last will lead near to what is taught in the Great Learning.`,\n    Author: `Confucius`,\n    Context: `The Great Learning`\n  },\n  {\n    Text: `Peace cannot be kept by force. It can only be achieved by understanding. You cannot subjugate a nation forcibly unless you wipe out every man, woman, and child. Unless you wish to use such drastic measures, you must find a way of settling your disputes without resort to arms.`,\n    Author: `Albert Einstein`,\n    Context: `From a speech to the New History Society (14 December 1930)`\n  },\n  {\n    Text: `Striving for peace and preparing for war are incompatible with each other, and in our time more so than ever.`,\n    Author: `Albert Einstein`,\n    Context: `From a 16 June 1950 U.N. radio interview`\n  },\n  {\n    Text: `Ye shall know the truth, and the truth shall make you free.`,\n    Author: `Jesus`,\n    Context: `John 8:32 (KJV)`\n  },\n  {\n    Text: `I am not interested in power for power's sake, but I'm interested in power that is moral, that is right and that is good.`,\n    Author: `Martin Luther King Jr.`,\n    Context: `As quoted in The Civil Sphere (2006) by Jeffrey C. Alexander, p. 388`\n  },\n  {\n    Text: `It is a trite yet urgently true observation that if America is to remain a first-class nation, it cannot have second-class citizens.`,\n    Author: `Martin Luther King Jr.`,\n    Context: `The Rising Tide of Racial Consciousness (1960)`\n  },\n  {\n    Text: `Eloquence may strike the ear, but the language of poverty strikes the heart; the first may charm like music, but the second alarms like a knell.`,\n    Author: `Thomas Paine`,\n    Context: `Case of the Excise Officers (1772)`\n  },\n  {\n    Text: `Where knowledge is a duty, ignorance is a crime.`,\n    Author: `Thomas Paine`,\n    Context: `Public Good (December 1780)`\n  },\n  {\n    Text: `We fight not to enslave, but to set a country free, and to make room upon the earth for honest men to live in.`,\n    Author: `Thomas Paine`,\n    Context: `The American Crisis No. IV.`\n  },\n  {\n    Text: `The worst sin towards our fellow creatures is not to hate them, but to be indifferent to them: that's the essence of inhumanity.`,\n    Author: `George Bernard Shaw`,\n    Context: `The Devil's Disciple, Act II (1901)`\n  },\n  {\n    Text: `Life is not meant to be easy, my child but take courage: it can be delightful.`,\n    Author: `George Bernard Shaw`,\n    Context: `Back to Methuselah (1921)`\n  },\n  {\n    Text: `Man is free at the instant he wants to be.`,\n    Author: `Voltaire`,\n    Context: `Brutus, act II, scene I (1730)`\n  }\n]\n","import type { Quote } from './Quote'\n\n// QuoteMachine is an object that can generate quotes from a pool of quotes.\n// The quotes must be an array of Quote items.\nexport class QuoteMachine {\n  quotes: Array<Quote>\n\n  constructor(pool: Array<Quote>) {\n    this.quotes = [...pool]\n  }\n\n  generate(): Quote {\n    // rng generates a random number from 0 to len(quotes)\n    const rng = () => Math.floor(Math.random() * this.quotes.length)\n    return this.quotes[rng()]\n  }\n}\n","import React from 'react'\nimport { Quote, DefaultQuotes } from './Quote'\nimport { QuoteMachine } from './QuoteMachine'\n\nclass QuoteContainer extends React.Component {\n  quoteMachine: QuoteMachine\n  state: { quote: Quote }\n\n  constructor(props: object) {\n    super(props)\n    this.quoteMachine = new QuoteMachine(DefaultQuotes)\n    this.state = {\n      quote: this.quoteMachine.generate()\n    }\n    this.generateQuote = this.generateQuote.bind(this)\n  }\n\n  generateQuote(): void {\n    this.setState({\n      quote: this.quoteMachine.generate()\n    })\n    console.log(this.state.quote)\n  }\n\n  render(): JSX.Element {\n    const newQuoteArgs = {generator: this.generateQuote}\n    return (\n      <div id=\"quote-box-conatiner\">\n        <div className=\"card border-primary mx-auto bg-light\" id=\"quote-box\">\n          <div className=\"card-body\">\n            <QuoteBox {...this.state.quote} />\n            <div className=\"list-inline\">\n              <NewQuote {...newQuoteArgs} />\n              <TweetQuote {...this.state.quote} />\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nclass QuoteBox extends React.Component<Quote> {\n  render(): JSX.Element {\n    let footerContent : JSX.Element\n    if (this.props.Context) {\n      footerContent = (\n        <footer className=\"blockquote-footer\" id=\"author-context\">\n          <span id=\"author\">{this.props.Author}</span>, <cite className=\"text-muted\" id=\"context\">{this.props.Context}</cite>\n        </footer>\n      )} else {\n      footerContent = (\n        <footer className=\"blockquote-footer\" id=\"author-context\">\n          <span id=\"author\">{this.props.Author}</span>\n        </footer>\n      )\n    }\n\n    return (\n      <blockquote className=\"blockquote\" id=\"quote\">\n        <p id=\"text\">{this.props.Text}</p> \n        {footerContent}\n      </blockquote>\n    )\n  }\n}\n\nclass NewQuote extends React.Component {\n  generator: () => {}\n\n  constructor(props: { generator: () => {} }) {\n    super(props)\n    this.generator = props.generator\n  }\n\n  render(): JSX.Element {\n    return (\n      <li className=\"list-inline-item\">\n        <button id=\"new-quote\" className=\"list-inline-item btn btn-primary\" onClick={this.generator}>New Quote</button>\n      </li>\n    )\n  }\n}\n\nclass TweetQuote extends React.Component<Quote> {\n  render(): JSX.Element {\n    let text = encodeURIComponent(`\"${this.props.Text}\" - ${this.props.Author}`)\n    return (\n      <li className=\"list-inline-item\">\n        <a id=\"tweet-quote\" className=\"btn btn-primary\" href={`https://twitter.com/intent/tweet?text=${text}`}>Tweet Quote</a>\n      </li>\n    )\n  }\n}\n\nexport default QuoteContainer\n","import React from 'react';\nimport './App.scss';\nimport Header from './Header';\nimport Footer from './Footer';\nimport QuoteContainer from './QuoteContainer';\n\nfunction App() {\n  return (\n    <div id=\"App\">\n      <Header />\n      <QuoteContainer />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// Include freeCodeCamp testing suite\nconst $script = require('scriptjs')\n$script.get('https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js', () => {});\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}